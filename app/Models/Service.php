<?phpnamespace App\Models;use Illuminate\Database\Eloquent\Factories\HasFactory;use Illuminate\Database\Eloquent\Model;use PhpOffice\PhpSpreadsheet\IOFactory;use PhpOffice\PhpSpreadsheet\Spreadsheet;use Illuminate\Support\Facades\DB;class Service extends Model{    use HasFactory;    public static function get_user_id()    {        return User::where("remember_token", "=", session()->get("user_token"))->first("id")->id;    }    public static function calendar_reload($request)    {        $date = $request->input("date") ? date("Y-m-d", strtotime($request->input("date")."-01")) : "";        $provider = $request->input("helper_id") ?? "";        $user_id = self::get_user_id();        $lists = [];        $sort = [];        $helpers = [];        if ($request->input("member_id") == "") {            return [ "lists"=>$lists, "sort"=>[], "helpers"=>$helpers ];        }        if ($request->input("type") == "activity_time")        {            $lists = DB::table("voucher_logs")                ->where("user_id", "=", $user_id)                ->where("target_key", "=", $request->input("member_id"))                ->when($date, function ($query, $date) {                    return $query->whereRaw("service_start_date_time >= ? AND service_start_date_time <= LAST_DAY(?)", [ $date, $date ]);                })                ->when($provider, function($query, $provider) {                    return $query->whereRaw("provider_key = ?", [ $provider ]);                })                ->orderByDesc("service_start_date_time")                ->get();        }        else if ($request->input("type") == "activity_kind")        {            $lists = DB::table("voucher_logs")                ->select(DB::raw("                ANY_VALUE(target_key) as target_key,                 sum(payment_time) payment_time,                ANY_VALUE(service_start_date_time) as service_start_date_time,                ANY_VALUE(business_type) as business_type,                DATE_FORMAT(service_start_date_time, '%Y-%m-%d') AS service_date,                DATE_FORMAT(SEC_TO_TIME(sum(TIME_TO_SEC(social_activity_support))), '%H:%i') as social_activity_support_time,                 DATE_FORMAT(SEC_TO_TIME(sum(TIME_TO_SEC(physical_activity_support))), '%H:%i') as physical_activity_support_time,                DATE_FORMAT(SEC_TO_TIME(sum(TIME_TO_SEC(housekeeping_activity_support))), '%H:%i') as housekeeping_activity_support_time,                 DATE_FORMAT(SEC_TO_TIME(sum(TIME_TO_SEC(etc_service))), '%H:%i') as etc_service_time                "))                ->where("user_id", "=", $user_id)                ->where("target_key", "=", $request->input("member_id"))                ->when($date, function ($query, $date) {                    return $query->whereRaw("service_start_date_time >= ? AND service_start_date_time <= LAST_DAY(?)", [ $date, $date ]);                })                ->when($provider, function($query, $provider) {                    return $query->whereRaw("provider_key = ?", [ $provider ]);                })                ->orderByRaw("service_date")                ->groupByRaw("service_date")                ->get();        }        $helpers = DB::table("voucher_logs")            ->select(DB::raw("provider_key, ANY_VALUE(provider_name) as provider_name, ANY_VALUE(provider_birth) as provider_birth"))            ->where("user_id", "=", $user_id)            ->where("target_key", "=", $request->input("member_id"))            ->when($date, function ($query, $date) {                return $query->whereRaw("service_start_date_time >= ? AND service_start_date_time <= LAST_DAY(?)", [ $date, $date ]);            })            ->groupByRaw("provider_key")            ->get();        $time_total = 0;        foreach($lists as $key=>$list)        {            $date = date("Y-m-d", strtotime($list->service_start_date_time));            $time_total += $list->payment_time;            $business_type = DB::table("business_types")                    ->where("name", "=", $list->business_type)                    ->first();            $list->type1 = 0;            $list->type2 = 0;            if (!$business_type) $list->type1 = $list->payment_time;            if ($business_type->type == 1) $list->type1 = $list->payment_time;            else if ($business_type->type == 2) $list->type2 = $list->payment_time;            if (!isSet($sort[$date])) {                $sort[$date] = [];            }            array_push($sort[$date], $list);        }        return [            "lists" => $lists,            "sort"=> $sort,            "helpers" => $helpers,            "total" => $time_total        ];    }    public static function get($type, $page)    {        $user_id = self::get_user_id();        $offset = ((int)$page - 1) * 15;        $now = date("Y-m-d");        $term = $_GET['term'] ?? "";        $target_name = $_GET['target_name'] ?? "";        $provider_name = $_GET['provider_name'] ?? "";        $from_date = $_GET['from_date'] ?? "";        $to_date = $_GET['to_date'] ?? "";        $limit = $_GET['limit'] ?? 15;        $table ="";        switch ($type)        {            case "exist":                $table = "voucher_logs_old";                break;            case "new":                $table = "voucher_logs";                break;        }        $lists = DB::table($table)            ->where("user_id", "=", $user_id)            ->where(function($query) use($term, $type, $target_name, $provider_name, $from_date, $to_date, $now) {                if ($term != "") {                    $query->where("name", "like", "%{$term}%");                }                if ($target_name != "") {                    $query->where("target_name", "like", "%{$target_name}%");                }                if ($provider_name != "") {                    $query->where("provider_name", "like", "%{$provider_name}%");                }                if ($from_date != "") {                    if ($type == "exist") {                        $query->whereRaw("target_ym >= ?", [ date("Ym", strtotime($from_date)) ]);//                        $query->whereRaw("target_ym < ?", [ date("Ym", strtotime($from_date." +1 months")) ]);                    }                    if ($type == "new") {                        $query->whereRaw("target_ym >= ?", [ date("Y-m-d", strtotime($from_date)) ]);//                        $query->whereRaw("target_ym < ?", [ date("Y-m-d", strtotime($from_date." +1 months")) ]);                    }                }                if ($to_date != "") {                    $query->whereRaw("regdate <= LAST_DAY(?)", [ date("Y-m-d", strtotime($to_date)) ]);                }            })            ->orderBy("payment_date")            ->offset($offset)            ->limit($limit)            ->get();        $paging = DB::table($table)            ->select(DB::raw("count(id) as cnt"))            ->where("user_id", "=", $user_id)            ->where(function($query) use($term, $type, $target_name, $provider_name, $from_date, $to_date, $now) {                if ($term != "") {                    $query->where("name", "like", "%{$term}%");                }                if ($target_name != "") {                    $query->where("target_name", "like", "%{$target_name}%");                }                if ($provider_name != "") {                    $query->where("provider_name", "like", "%{$provider_name}%");                }                if ($from_date != "") {                    if ($type == "exist") {                        $query->whereRaw("target_ym >= ?", [ date("Ym", strtotime($from_date)) ]);//                        $query->whereRaw("target_ym < ?", [ date("Ym", strtotime($from_date." +1 months")) ]);                    }                    if ($type == "new") {                        $query->whereRaw("target_ym >= ?", [ date("Y-m-d", strtotime($from_date)) ]);//                        $query->whereRaw("target_ym < ?", [ date("Y-m-d", strtotime($from_date." +1 months")) ]);                    }                }                if ($to_date != "") {                    $query->whereRaw("regdate <= LAST_DAY(?)", [ date("Y-m-d", strtotime($to_date)) ]);                }            })            ->first("cnt")->cnt;        return [ "lists" => $lists, "paging" => $paging ];    }    public static function upload($request)    {        $user_id = self::get_user_id();        $result = [ "succCnt"=>0, "errCnt"=>0, "dupCnt"=>0, "errData"=>[] ];        $upload_type = "";        $upload_file = "";        $table = "";        switch ($request->input("type"))        {            case "old":                $upload_type = "upload_type_basic";                $table = "voucher_logs_old";                $upload_file = "basic_excel_upload";                break;            case "new":                $upload_type = "detail_upload_type";                $table = "voucher_logs";                $upload_file = "detail_excel_upload";                break;            default:                break;        }        // 갱신하기        if ($request->input($upload_type) == "renew") {            DB::table($table)->where("user_id", "=", $user_id)->delete();        }        $upload = $request->file($upload_file)->store("upload/docs");        $reader = IOFactory::createReader("Xlsx");        $reader->setReadDataOnly(true);        $worksheetData = $reader->listWorksheetInfo($upload);        foreach ($worksheetData as $key => $worksheet)        {            if ($key >= 1 ) continue; // 두번째시트는 양식이라서            $sheetName = $worksheet['worksheetName'];            $reader->setLoadSheetsOnly($sheetName);            $spreadsheet = $reader->load($upload);            $_worksheets = $spreadsheet->getActiveSheet()->toArray();            unset($_worksheets[0]);            foreach ($_worksheets as $_key => $val)            {                // 이름없으면 넘기기                if ($val[0] == "") {                    continue;                }                // 신규자료 업데이트 일 때 주민등록번호 같은사람 있으면 넘기기 (구분값이 없어서 이 기능 안될걸로 보인다)//                if ($request->input($upload_type") == "new") {//                    $isMember = DB::table($table")//                        ->where("confirm_date", "=", $val[2]) // 발 바꿔야함//                        ->where("target_ym", "=", $val[2])//                        ->where("user_id", "=", $user_id)->first();//                    if ($isMember) {//                        $result['dupCnt']++;//                        continue;//                    }//                }                $values = [];                if ($request->input("type") == "new")                {                    $year = date("Y", strtotime($val[10]));                    $service_start_date_time = date("Y-m-d H:i:s", strtotime($year."-".$val[20]));                    $service_end_date_time = date("Y-m-d H:i:s", strtotime($year."-".$val[21]));                    $social_activity_support = !$val[31] && $val[31] == "" ? "00:00" : date("H:i", strtotime($val[31]));                    $physical_activity_support = !$val[32] && $val[32] == "" ? "00:00" : date("H:i", strtotime($val[32]));                    $housekeeping_activity_support = !$val[33] && $val[33] == "" ? "00:00" : date("H:i", strtotime($val[33]));                    $etc_service = !$val[34] && $val[34] == "" ? "00:00" : date("H:i", strtotime($val[34]));                    $values = [                        "user_id"                                   => $user_id,                        "target_key"                                => $val[1].$val[2],                        "target_name"                                   => $val[1],                        "target_birth"                                => $val[2],                        "grade"                                        => $val[3],                        "provider_key"                              =>$val[4].$val[5],                        "provider_name"                             => $val[4],                        "provider_birth"                            => $val[5],                        "address"                                => $val[6],                        "business_type_id"                          => $val[7],                        "business_type"                            => $val[8],                        "service_type"                        => $val[9],                        "confirm_date"                          => date("Y-m-d H:i:s", strtotime($val[10])),                        "confirm_number"                         => $val[11],                        "target_ym"                                   => date("Y-m-d", strtotime($val[12]."01")),                        "confirm_pay"                               => $val[13],                        "government_support_pay_total"              => $val[14],                        "personal_charge_total"                        => $val[15],                        "basic_payment_government_support"          => $val[16],                        "basic_payment_personal_charge"              => $val[17],                        "add_payment_government_support"             => $val[18],                        "add_payment_personal_charge"             => $val[19],                        "service_start_date_time"                     => $service_start_date_time,                        "service_end_date_time"                         => $service_end_date_time,                        "payment_time"                               => $val[22],                        "payment_personnel"                         => $val[23],                        "payment_type"                               => $val[24],                        "retroactive_reason"                        => $val[25],                        "payment_way"                                 => $val[26],                        "payment_date"                                => date("Y-m-d H:i:s", strtotime($val[27])),                        "return_sort"                                   => $val[28],                        "return_confirm_date"                             => date("Y-m-d H:i:s",strtotime($val[29])) ?? date("Y-m-d H:i:s",strtotime("0000-00-00 00:00:00")),                        "direct_confirm_check"                             => $val[30],                        "social_activity_support"                     => $social_activity_support,                        "physical_activity_support"                       => $physical_activity_support,                        "housekeeping_activity_support"                  => $housekeeping_activity_support,                        "etc_service"                                 => $etc_service,                        "car_bath"                                      => $val[35],                        "home_bath"                                    => $val[36],                        "basic_care"                                 => $val[37],                        "cure_care"                                  => $val[38],                        "edu_counseling"                            => $val[39],                        "visit_care_order"                          => $val[40],                        "add_price"                                 => $val[41],                        "provision_hold_log"                        => $val[42],                    ];                }                else                {//                    if ($val[2] == "") {//                        $val[2] = randomDate();//                    }                    $values = [                        "user_id" => $user_id,                        "target_key" => $val[1].$val[2],                        "target_name" => $val[1],                        "target_birth" => $val[2],                        "target_id" => $val[3],                        "city_code" => $val[4],                        "city_name" => $val[5],                        "sigungu_code" => $val[6],                        "sigungu_name" => $val[7],                        "target_grade" => $val[8],                        "provider_key" => $val[9].$val[10],                        "provider_name" => $val[9],                        "provider_birth" => $val[10],                        "payment_type" => $val[11],                        "device_model" => $val[12],                        "cat_id" => $val[13],                        "payment_phone_info" => $val[14],                        "serial_number" => $val[15],                        "payment_datetime" => $val[16],                        "confirm_number" => $val[17],                        "target_ym" => $val[18],                        "confirm_price" => $val[19],                        "government_support_total" => $val[20],                        "personal_charge_total" => $val[21],                        "basic_pay_government_support" => $val[22],                        "basic_pay_personal_charge" => $val[23],                        "add_pay_government_support" => $val[24],                        "add_pay_personal_charge" => $val[25],                        "payment_division" => $val[26],                        "payment_personnel" => $val[27],                        "business_division" => $val[28],                        "business_type" => $val[29],                        "service_type" => $val[30],                        "start_date_mdhi" => $val[31],                        "end_date_mdhi" => $val[32],                        "service_provide_time_total" => $val[33],                        "social_activity_support" => $val[34],                        "physical_activity_support" => $val[35],                        "housekeeping_activity_support" => $val[36],                        "etc_service" => $val[37],                        "car_bath" => $val[38],                        "home_bath" => $val[39],                        "basic_care" => $val[40],                        "cure_care" => $val[41],                        "edu_counseling" => $val[42],                        "visit_care_order" => $val[43],                        "batch_payment_reason" => $val[44],                        "payment_date" => $val[45],                        "return_sort" => $val[46],                        "return_confirm_date" => $val[47],                        "addition_check" => $val[48],                        "add_price" => $val[49],                        "payment_hold_log" => $val[50],                    ];                }                $success = DB::table($table)->insert($values);                if ($success) {                    $result['succCnt']++;                } else {                    $result['errCnt']++;                    $result['errData'][] = "{$val[0]} 이용자 업로드에 실패했습니다";                }            }        }        return $result;    }    public static function find($request, $page)    {        $user_id = self::get_user_id();        $offset = ((int)$page - 1) * 15;        $limit = $_GET['limit'] ?? 15;        $lists = DB::table("voucher_logs")            ->when( in_array("총결제시간", $request->input("search_type") ?? []), function ($query) use ($request) {                $subJoin = DB::table("voucher_logs")                    ->select(DB::raw("target_key, SUM(payment_time) as sumpay"))                    ->groupBy("target_key")                    ->when($request->input("total_time_1"), function($subQuery) use ($request) {                        return $subQuery->havingRaw("sum(payment_time) >= ?", [ $request->input("total_time_1") ]);                    })                    ->when($request->input("total_time_2"), function($subQuery) use ($request) {                        return $subQuery->havingRaw("sum(payment_time) <= ?", [ $request->input("total_time_2") ]);                    });                return $query->joinSub($subJoin, "t2", function($join) use($request) {                    $join->on("voucher_logs.target_key", "=", "t2.target_key");                });            })            ->where("user_id", "=", $user_id)            ->where(function($query) use($request) {                if ($request->input("from_date") != "") {                    $query->whereRaw("target_ym >= ?", [ date("Y-m-d", strtotime($request->input("from_date")."-01")) ]);                }                if ($request->input("to_date") != "") {                    $query->whereRaw("target_ym <= LAST_DAY(?)", [ date("Y-m-d", strtotime($request->input("to_date")."-01")) ]);                }                if ( in_array("일일결제시간", $request->input("search_type") ?? []) ) {                    $query->whereRaw("payment_time >= ?", [ $request->input("daily_total_time") ]);                }                if ( in_array("결제인원", $request->input("search_type") ?? []) ) {                    $query->whereRaw("payment_personnel = ?", [ "2인이상결제" ]);                }                // 결제유형이 소급결제 이고, 승인시간이 활동내역 전 후 []... 물어보고 진행//                if ( in_array("결제유형", $request->input("search_type") ?? []) ) {//                    $query->whereRaw("payment_type = ?", [ "소급결제" ]);//                    $query->whereRaw("");//                }                // 결제유형2                if ( in_array("결제유형2", $request->input("search_type") ?? []) ) {                    $query->whereRaw("payment_type = ?", [ "소급결제" ]);                    $query->whereRaw("confirm_date >= ?", [ $request->input("low_cost_confirm_date1") ]);                    $query->whereRaw("confirm_date <= ?", [ $request->input("low_cost_confirm_date2") ]);                }                // 결제유형 3은 애매하니 물어보고하기로                // 결제유형 4                if ( in_array("결제유형4", $request->input("search_type") ?? []) ) {                    $query->whereRaw("payment_type = ?", [ "소급결제" ]);                    $reason = "";                    foreach ($request->input("payment_cause") ?? [] as $key => $val) {                        $reason = $reason == "" ? $val : $reason."|".$val;                    }                    $query->whereRaw("retroactive_reason REGEXP ?", [ $reason ]);                }            })            ->orderByDesc("target_ym")            ->offset($offset)            ->limit($limit)            ->get();        $paging = DB::table("voucher_logs")            ->select(DB::raw("count(*) as cnt"))            ->when( in_array("총결제시간", $request->input("search_type") ?? []), function ($query) use ($request) {                $subJoin = DB::table("voucher_logs")                    ->select(DB::raw("target_key, SUM(payment_time) as sumpay"))                    ->groupBy("target_key")                    ->when($request->input("total_time_1"), function($subQuery) use ($request) {                        return $subQuery->havingRaw("sum(payment_time) >= ?", [ $request->input("total_time_1") ]);                    })                    ->when($request->input("total_time_2"), function($subQuery) use ($request) {                        return $subQuery->havingRaw("sum(payment_time) <= ?", [ $request->input("total_time_2") ]);                    });                return $query->joinSub($subJoin, "t2", function($join) use($request) {                    $join->on("voucher_logs.target_key", "=", "t2.target_key");                });            })            ->where("user_id", "=", $user_id)            ->where(function($query) use($request) {                if ($request->input("from_date") != "") {                    $query->whereRaw("target_ym >= ?", [ date("Y-m-d", strtotime($request->input("from_date")."-01")) ]);                }                if ($request->input("to_date") != "") {                    $query->whereRaw("target_ym <= LAST_DAY(?)", [ date("Y-m-d", strtotime($request->input("to_date")."-01")) ]);                }                if ( in_array("일일결제시간", $request->input("search_type") ?? []) ) {                    $query->whereRaw("payment_time >= ?", [ $request->input("daily_total_time") ]);                }                if ( in_array("결제인원", $request->input("search_type") ?? []) ) {                    $query->whereRaw("payment_personnel = ?", [ "2인이상결제" ]);                }                // 결제유형2                if ( in_array("결제유형2", $request->input("search_type") ?? []) ) {                    $query->whereRaw("payment_type = ?", [ "소급결제" ]);                    $query->whereRaw("confirm_date >= ?", [ $request->input("low_cost_confirm_date1") ]);                    $query->whereRaw("confirm_date <= ?", [ $request->input("low_cost_confirm_date2") ]);                }                // 결제유형 3은 애매하니 물어보고하기로                // 결제유형 4                if ( in_array("결제유형4", $request->input("search_type") ?? []) ) {                    $query->whereRaw("payment_type = ?", [ "소급결제" ]);                    $reason = "";                    foreach ($request->input("payment_cause") ?? [] as $key => $val) {                        $reason = $reason == "" ? $val : $reason."|".$val;                    }                    $query->whereRaw("retroactive_reason REGEXP ?", [ $reason ]);                }            })            ->orderByDesc("target_ym")            ->first();        /*            * 현재는 같은 사람도 여러개 나오고있다. 그룹바이쓸거면 when 하나 더 줘서 전체쿼리에 그룹바이 주면 된다        * */        return [ "lists" => $lists, "paging" => $paging ];    }}